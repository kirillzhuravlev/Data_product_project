library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y=as.factor(vowel.train$y)
vowel.test$y=as.factor(vowel.test$y)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(randomForest)
vowel.train$y=as.factor(vowel.train$y)
vowel.test$y=as.factor(vowel.test$y)
set.seed(33833)
pr1<-train(factor(y)~., data=vowel.train, method="rf")
pr2<-train(factor(y)~., data=vowel.train, method="gmb", verbose=FALSE)
test1<-predict(pr1, vowel.test)
test2<-predict(pr2, vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
library(randomForest)
vowel.train$y=as.factor(vowel.train$y)
vowel.test$y=as.factor(vowel.test$y)
set.seed(33833)
pr1<-train(factor(y)~., data=vowel.train, method="rf")
pr2<-train(factor(y)~., data=vowel.train, method="gbm", verbose=FALSE)
test1<-predict(pr1, vowel.test)
test2<-predict(pr2, vowel.test)
test1
summary(test1)
confusionMatrix(test1, test2)
confusionMatrix(test1, vowel.test)
confusionMatrix(test1, vowel.test$y)
confusionMatrix(test2, vowel.test$y)
library(randomForest)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod1<-train(diagnosis~., data=training, method="rf")
mod2<-train(diagnosis~., data=training, method="gbm")
mod3<-train(diagnosis~., data=training, method="lda")
pr1<-predict(mod1, testing)
pr2<-predict(mod2, testing)
pr3<-predict(mod3, testing)
newdata<-data.frame(pr1, pr2, pr3, diagnosis=testing$diagnosis)
newtr<-train(diagnosis~., method="rf", data=newdata)
newpr<-predict(newpr, newdata)
library(randomForest)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod1<-train(diagnosis~., data=training, method="rf")
mod2<-train(diagnosis~., data=training, method="gbm")
mod3<-train(diagnosis~., data=training, method="lda")
pr1<-predict(mod1, testing)
pr2<-predict(mod2, testing)
pr3<-predict(mod3, testing)
newdata<-data.frame(pr1, pr2, pr3, diagnosis=testing$diagnosis)
newtr<-train(diagnosis~., method="rf", data=newdata)
newpr<-predict(newtr, newdata)
confusionMatrix(testing$diagnosis, pr1)
confusionMatrix(testing$diagnosis, newpr)
confusionMatrix(testing$diagnosis, pr2)
confusionMatrix(testing$diagnosis, pr3)
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
mod
?plot.enet
plot(mod, xvar=penalty)
plot(mod, xvar="penalty")
?enet
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
pr<-predict(mod, testing)
obj<-enet(concrete[,-CompressiveStrength], pr, lambda=0)
plot(obj,xvar="penalty")
obj<-enet(concrete[,-c("CompressiveStrength")], )
head(concrete)
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
pr<-predict(mod, testing)
obj<-enet(concrete[,-ncol(concrete)], pr, lambda=0)
plot(obj,xvar="penalty")
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
pr<-predict(mod, testing)
obj<-enet(names(concrete)[-ncol(concrete)], pr, lambda=0)
plot(obj,xvar="penalty")
summary(pr)
summary(mod)
pr
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
pr<-predict(mod, testing)
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
pr<-predict(mod, testing)
obj<-enet(names(concrete)[-ncol(concrete)], pr, lambda=0)
plot(obj,xvar="penalty")
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
pr<-predict(mod, testing)
obj<-enet(CompressiveStrength, pr, lambda=0)
plot(obj,xvar="penalty")
library(caret)
library(randomForest)
set.seed(233)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
mod<-train(CompressiveStrength~., method="lasso", data=training)
pr<-predict(mod, testing)
obj<-enet(concrete$CompressiveStrength, pr, lambda=0)
plot(obj,xvar="penalty")
?enet
data(diabetes)
attach(diabetes)
object1<-enet(x,y,lambda=0)
head(diabetes)
source('~/.active-rstudio-document', echo=TRUE)
source('E:/Kirill/DataCoursera/MachLearn/quiz4_q3.R', echo=TRUE)
?attach
source('E:/Kirill/DataCoursera/MachLearn/quiz4_q3.R', echo=TRUE)
head(concrete)
source('E:/Kirill/DataCoursera/MachLearn/quiz4_q3.R', echo=TRUE)
source('E:/Kirill/DataCoursera/MachLearn/quiz4_q3.R', echo=TRUE)
source('E:/Kirill/DataCoursera/MachLearn/quiz4_q3.R', echo=TRUE)
source('E:/Kirill/DataCoursera/MachLearn/quiz4_q3.R', echo=TRUE)
plot(obj)
source('E:/Kirill/DataCoursera/MachLearn/quiz4_q3.R', echo=TRUE)
head(concrete)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(shuttle)
?glm
source('~/.active-rstudio-document', echo=TRUE)
mod
summary(mod)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data("InsectSprays")
head(InsectSprays)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(yhat)
yhat
plot(x,y)
lines(x,yhat)
yhat$coeff
mod<-lm(y~xm-1)
mod$coefficients
summary(mod)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kzhuravlev', token='2418950E81F633AE8330B334D6307D13', secret='i+Fj4ReQ329IorxVun8b+hSlm6EosuoFcbHlXaGl')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kzhuravlev', token='2418950E81F633AE8330B334D6307D13', secret='i+Fj4ReQ329IorxVun8b+hSlm6EosuoFcbHlXaGl')
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kzhuravlev', token='2418950E81F633AE8330B334D6307D13', secret='i+Fj4ReQ329IorxVun8b+hSlm6EosuoFcbHlXaGl')
deployApp()
library(shiny)
deployApp()
library(shinyapps)
deployApp()
getMethod(mean)
getMethod('mean')
getMethod('lm')
?getMethod
getMethod(lm)
getMethod(show)
getMethod(predict)
getMethod(colSums)
getMethod(dgamma)
showMethods(mean)
showMethods(show)
getClass(show)
showMethods()
??generic function
??generic
isGeneric(mean)
isGeneric('mean')
isGeneric('lm')
isGeneric('show')
isGeneric('dgamma')
isGeneric('predict')
isGeneric('colSums')
?dot
x<-c(1,-3,5)
y<-(0,2,-1)
y<-c(0,2,-1)
x%.%y
x**y
x*y
x%*%y
z<-x%*%y
z
class(z)
y<-c(7,2,-1)
z<-x%*%y
z
abs(x)
mod(x)
sqrt(x%*x%)
sqrt(4)
sqrt(x%*x%[1,1])
sqrt(x%*%x)
sqrt(x%*%x[1,1])
sqrt((x%*%x)[1,1])
len(x)
??vector length
??vector
norm(x)
x
?norm
dist(x,y)
?dist
norm(x, type='2')
A=rbind(x,y,c(-8,-4,9))
A
dist(A)
dist(A, upper=TRUE)
norm(x-y,type='2')
cbind(x,y,c(-8,-4,9))
A<-cbind(x,y,c(-8,-4,9))
transpose(A)
matrix.transpose(A)
??transpose
t(A)
setwd("E:/Kirill/DataCoursera/DataProducts/My_data_product_project/car_efficiency_prediction")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(UsingR)
data(mtcars)
library(ggplot2)
require(GGally)
#gg<-ggpairs(mtcars, lower=list(continuous="smooth"), params=c(method="loess"))
#gg
#with(mtcars, ggplot(mtcars)+geom_boxplot(aes(am, mpg, fill=factor(am))) )
#mean(subset(mtcars, mtcars$am==1)$mpg)-mean(subset(mtcars, mtcars$am==0)$mpg)
#result<-t.test(subset(mtcars, mtcars$am==1)$mpg, subset(mtcars, mtcars$am==0)$mpg, paired=FALSE, var.equal=FALSE)
#pairs(mtcars)
g <- ggplot(mtcars, aes(x = hp, y = mpg))
g <- g  + scale_size(range = c(10, 45), guide = "none" )
g <- g + geom_point(aes(color=factor(am)), size=5)
g <- g+geom_smooth(method="lm", formula=y~x)
#g <- g+geom_smooth(subset(mtcars, mtcars$am==1),method="lm", formula=y~x)
g
fit<-lm(mpg~wt+factor(am), mtcars[c(-17,-18, -20),])
#fit0<-lm(mpg~wt, subset(mtcars, mtcars$am==1)[c(-4,-6),])
g1 <- ggplot(mtcars, aes(x = wt, y = mpg))
g1 <- g1  + scale_size(range = c(10, 35), guide = "none" )
g1 <- g1 + geom_point(aes(color=factor(am)), size=5)
#g1 <- g1+geom_smooth(method="lm", formula=y~x)
#g <- g+geom_smooth(subset(mtcars, mtcars$am==1),method="lm", formula=y~x)
g1 <- g1+geom_abline(intercept=coef(fit)[1], slope=coef(fit)[2], size=2, color="red")
#g1<-g1+geom_abline(intercept=coef(fit0)[1], slope=coef(fit0)[2], size=2, color="black")
g1 <- g1+geom_abline(intercept=coef(fit)[1]+coef(fit)[3], slope=coef(fit)[2]+coef(fit)[4], size=2, color="blue")
g1
library(UsingR)
data(mtcars)
library(ggplot2)
require(GGally)
#gg<-ggpairs(mtcars, lower=list(continuous="smooth"), params=c(method="loess"))
#gg
#with(mtcars, ggplot(mtcars)+geom_boxplot(aes(am, mpg, fill=factor(am))) )
#mean(subset(mtcars, mtcars$am==1)$mpg)-mean(subset(mtcars, mtcars$am==0)$mpg)
#result<-t.test(subset(mtcars, mtcars$am==1)$mpg, subset(mtcars, mtcars$am==0)$mpg, paired=FALSE, var.equal=FALSE)
#pairs(mtcars)
g <- ggplot(mtcars, aes(x = hp, y = mpg))
g <- g  + scale_size(range = c(10, 45), guide = "none" )
g <- g + geom_point(aes(color=factor(am)), size=5)
g <- g+geom_smooth(method="lm", formula=y~x)
#g <- g+geom_smooth(subset(mtcars, mtcars$am==1),method="lm", formula=y~x)
g
fit<-lm(mpg~wt+factor(am), mtcars[c(-17,-18, -20),])
#fit0<-lm(mpg~wt, subset(mtcars, mtcars$am==1)[c(-4,-6),])
g1 <- ggplot(mtcars, aes(x = wt, y = mpg))
g1 <- g1  + scale_size(range = c(10, 35), guide = "none" )
g1 <- g1 + geom_point(aes(color=factor(am)), size=5)
#g1 <- g1+geom_smooth(method="lm", formula=y~x)
#g <- g+geom_smooth(subset(mtcars, mtcars$am==1),method="lm", formula=y~x)
g1 <- g1+geom_abline(intercept=coef(fit)[1], slope=coef(fit)[2], size=2, color="red")
g1<-g1+geom_abline(intercept=coef(fit0)[1], slope=coef(fit0)[2], size=2, color="black")
#g1 <- g1+geom_abline(intercept=coef(fit)[1]+coef(fit)[3], slope=coef(fit)[2]+coef(fit)[4], size=2, color="blue")
g1
library(UsingR)
data(mtcars)
library(ggplot2)
require(GGally)
#gg<-ggpairs(mtcars, lower=list(continuous="smooth"), params=c(method="loess"))
#gg
#with(mtcars, ggplot(mtcars)+geom_boxplot(aes(am, mpg, fill=factor(am))) )
#mean(subset(mtcars, mtcars$am==1)$mpg)-mean(subset(mtcars, mtcars$am==0)$mpg)
#result<-t.test(subset(mtcars, mtcars$am==1)$mpg, subset(mtcars, mtcars$am==0)$mpg, paired=FALSE, var.equal=FALSE)
#pairs(mtcars)
g <- ggplot(mtcars, aes(x = hp, y = mpg))
g <- g  + scale_size(range = c(10, 45), guide = "none" )
g <- g + geom_point(aes(color=factor(am)), size=5)
g <- g+geom_smooth(method="lm", formula=y~x)
#g <- g+geom_smooth(subset(mtcars, mtcars$am==1),method="lm", formula=y~x)
g
fit<-lm(mpg~wt+factor(am), mtcars[c(-17,-18, -20),])
fit0<-lm(mpg~wt, subset(mtcars, mtcars$am==1)[c(-4,-6),])
g1 <- ggplot(mtcars, aes(x = wt, y = mpg))
g1 <- g1  + scale_size(range = c(10, 35), guide = "none" )
g1 <- g1 + geom_point(aes(color=factor(am)), size=5)
#g1 <- g1+geom_smooth(method="lm", formula=y~x)
#g <- g+geom_smooth(subset(mtcars, mtcars$am==1),method="lm", formula=y~x)
g1 <- g1+geom_abline(intercept=coef(fit)[1], slope=coef(fit)[2], size=2, color="red")
g1<-g1+geom_abline(intercept=coef(fit0)[1], slope=coef(fit0)[2], size=2, color="black")
#g1 <- g1+geom_abline(intercept=coef(fit)[1]+coef(fit)[3], slope=coef(fit)[2]+coef(fit)[4], size=2, color="blue")
g1
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
